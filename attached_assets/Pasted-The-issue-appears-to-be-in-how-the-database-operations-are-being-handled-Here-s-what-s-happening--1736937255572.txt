The issue appears to be in how the database operations are being handled. Here's what's happening:

In memory.ts, there's a service layer making the API call to '/api/village' correctly:

typescriptCopyexport async function addVillageMember(userId: number, memberData: any) {
  const response = await fetch('/api/village', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      ...memberData,
      userId,
    }),
  });

However, in routes.ts, there appears to be a mismatch between the old and new implementations:

typescriptCopy// Old implementation
db.insert(villageMembers).values({
  userId: user.id,
  name: req.body.name,
  type: req.body.type,
  circle: req.body.circle,
  interactionFrequency: req.body.interactionFrequency
}).returning();

// New implementation
db.village.create({
  data: {
    userId,
    ...memberData,
  },
});
The error is occurring because the code is trying to use a Prisma-style syntax (db.village.create) when it appears your database setup is using a different ORM (likely DrizzleORM based on the insert syntax).
Here's how to fix it:

First, update routes.ts to use the correct database syntax:

typescriptCopy// server/routes.ts
try {
  const { userId, ...memberData } = req.body;
  
  const [newMember] = await db.insert(villageMembers)
    .values({
      userId,
      name: memberData.name,
      type: memberData.type,
      circle: memberData.circle,
      interactionFrequency: memberData.interactionFrequency || 1
    })
    .returning();

  console.log('Created village member:', newMember);
  return res.json(newMember);
} catch (error) {
  console.error('Failed to create village member:', error);
  return res.status(500).json({ 
    error: error instanceof Error ? error.message : 'Failed to create village member' 
  });
}

Add proper error handling in the memory service:

typescriptCopy// server/services/memory.ts
export async function addVillageMember(userId: number, memberData: any) {
  try {
    const response = await fetch('/api/village', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId,
        ...memberData,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to add village member');
    }

    const data = await response.json();
    console.log('Successfully added village member:', data);
    return data;
  } catch (error) {
    console.error('Village member creation failed:', error);
    throw error;
  }
}

Make sure your database schema is properly defined:

typescriptCopy// db/schema.ts
export const villageMembers = pgTable('village_members', {
  id: serial('id').primaryKey(),
  userId: integer('user_id').notNull(),
  name: text('name').notNull(),
  type: text('type').notNull(),
  circle: integer('circle').notNull(),
  interactionFrequency: integer('interaction_frequency').default(1),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
});
To help debug this further:

Add more detailed logging:

typescriptCopy// In routes.ts
console.log('Received request body:', req.body);
console.log('Database operation starting with values:', {
  userId,
  ...memberData
});

Check if your database connection is working:

typescriptCopy// At the top of routes.ts
try {
  await db.execute(sql`SELECT 1`);
  console.log('Database connection verified');
} catch (error) {
  console.error('Database connection failed:', error);
}