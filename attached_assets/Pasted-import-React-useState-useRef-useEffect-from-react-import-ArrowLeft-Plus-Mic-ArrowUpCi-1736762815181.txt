import React, { useState, useRef, useEffect } from 'react';
import { ArrowLeft, Plus, Mic, ArrowUpCircle, Expand, Circle } from 'lucide-react';
import { useRouter } from 'next/router';

interface ChatViewProps {
  currentView?: string;
  onNavigate?: (view: string) => void;
}

const theme = {
  primary: 'bg-[#F2F0B5]',
  secondary: 'bg-white',
  accent: 'bg-[#629785]',
  text: {
    primary: 'text-black',
    secondary: 'text-gray-800',
    muted: 'text-gray-500'
  }
};

const TypingIndicator = () => (
  <div className="flex space-x-2 p-3 bg-gray-100 rounded-2xl w-16">
    <Circle className="w-2 h-2 animate-bounce" />
    <Circle className="w-2 h-2 animate-bounce delay-100" />
    <Circle className="w-2 h-2 animate-bounce delay-200" />
  </div>
);

const Avatar = ({ sender }) => (
  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
    sender === 'assistant' ? 'bg-[#FFC74A]' : 'bg-yellow-100'
  }`}>
    <span className="text-white text-sm">
      {sender === 'assistant' ? 'N' : 'U'}
    </span>
  </div>
);

const ChatView: React.FC<ChatViewProps> = ({ currentView, onNavigate }) => {
  const router = useRouter();
  const [messages, setMessages] = useState([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const handleBack = () => {
    if (onNavigate) {
      onNavigate('home');
    }
    router.push('/');
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  useEffect(() => {
    setMessages([
      { 
        text: "Hallo! Ik ben Nuri, je AI parenting coach.", 
        sender: 'assistant',
        timestamp: new Date().toISOString()
      },
      { 
        text: "Hoe kan ik je vandaag helpen?", 
        sender: 'assistant',
        timestamp: new Date().toISOString()
      }
    ]);
  }, []);

  const formatTimestamp = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
  };

  const findBestMatch = (input) => {
    return demoResponses.find(r => 
      r.trigger.toLowerCase().trim() === input.toLowerCase().trim()
    );
  };

  const handleSend = async () => {
    if (inputText.trim()) {
      const userMessage = {
        text: inputText,
        sender: 'user',
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, userMessage]);
      setInputText('');
      setIsTyping(true);

      try {
        const API_KEY = process.env.NEXT_PUBLIC_ANTH_NURI_TEST;
        if (!API_KEY) {
          throw new Error("API key not found");
        }
        
        const response = await fetch("https://api.anthropic.com/v1/messages", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "anthropic-version": "2024-01-01",
            "x-api-key": API_KEY,
          },
          body: JSON.stringify({
            model: "claude-3-sonnet-20240229",
            max_tokens: 1024,
            messages: [
              {
                role: "system",
                content: "Je bent een opvoedingscoach van Nuri, een bedrijf dat moderne, op gehechtheid gebaseerde aanpakken in de opvoeding ondersteunt. Je spreekt Nederlands en gebruikt een warme, toegankelijke toon."
              },
              ...messages.map((msg) => ({
                role: msg.sender === "user" ? "user" : "assistant",
                content: msg.text,
              })),
              {
                role: "user",
                content: inputText,
              },
            ],
          }),
        });

        if (!response.ok) {
          throw new Error(`API request failed: ${response.status}`);
        }

        const data = await response.json();
        setMessages(prev => [...prev, {
          text: data.content[0].text,
          sender: "assistant",
          timestamp: new Date().toISOString()
        }]);
      } catch (error) {
        console.error("API Error:", error);
        setMessages(prev => [...prev, {
          text: "Sorry, er ging iets mis. Kun je het opnieuw proberen?",
          sender: "assistant",
          timestamp: new Date().toISOString()
        }]);
      }
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <div className="flex-1 flex flex-col bg-white">
      {/* Header */}
      <div className="w-full px-4 py-3 flex items-center justify-between border-b border-gray-200 bg-white">
        <button 
          className="p-2 hover:bg-gray-100 rounded-lg"
          onClick={handleBack}
        >
          <ArrowLeft className="w-6 h-6 text-gray-600" />
        </button>
        <button className={`p-2 ${theme.accent} hover:bg-[#F18303] rounded-full`}>
          <Plus className="w-6 h-6 text-white" />
        </button>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-orange-50">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex items-end space-x-2 ${
              message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : 'flex-row'
            }`}
          >
            <Avatar sender={message.sender} />
            <div className="flex flex-col">
              <div
                className={`px-4 py-2 rounded-2xl max-w-[280px] ${
                  message.sender === 'user'
                    ? `${theme.primary} ${theme.text.primary}`
                    : `${theme.secondary} ${theme.text.secondary}`
                }`}
              >
                {message.text}
              </div>
              <span className={`text-xs ${theme.text.muted} mt-1 ${
                message.sender === 'user' ? 'text-right' : 'text-left'
              }`}>
                {formatTimestamp(message.timestamp)}
              </span>
            </div>
          </div>
        ))}
        {isTyping && (
          <div className="flex items-end space-x-2">
            <Avatar sender="assistant" />
            <TypingIndicator />
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input area */}
      <div className="w-full px-4 py-3 border-t border-gray-200 bg-white">
        <div className="flex items-center space-x-2">
          <button className="p-2 hover:bg-gray-100 rounded-full">
            <Mic className="w-6 h-6 text-[#629785]" />
          </button>
          <input
            type="text"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Typ een boodschap  ..."
            className="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-transparent"
          />
          <button 
            onClick={handleSend}
            className="p-2 hover:bg-gray-100 rounded-full"
          >
            <ArrowUpCircle className="w-6 h-6 text-[#629785]" />
          </button>
          <button className="p-2 hover:bg-gray-100 rounded-full">
            <Expand className="w-6 h-6 text-[#629785]" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatView;