Looking at your code and the error "Invalid response format: expected JSON", this error is likely occurring in your handleApiResponse function when the server responds with a non-JSON content type. Let's examine and fix the potential issues:

The error could be happening because either:


The server is not sending a proper JSON response
The response headers don't have the correct content-type
The response is malformed

Here are a few potential fixes:

Make the error handling more robust in handleApiResponse:

typescriptCopyconst handleApiResponse = async (response: Response) => {
  try {
    // First try to parse as JSON regardless of content-type
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.message || `HTTP error! status: ${response.status}`);
    }
    
    return data;
  } catch (error) {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    throw new Error("Failed to parse response as JSON");
  }
};

Or check your API endpoint to ensure it's setting the correct headers:

typescriptCopy// On your API endpoint
res.setHeader('Content-Type', 'application/json');
res.json(data);

If you want to keep the strict content-type checking, modify the condition:

typescriptCopyconst handleApiResponse = async (response: Response) => {
  const contentType = response.headers.get("content-type");
  
  if (!response.ok) {
    let errorMessage;
    try {
      const errorData = await response.json();
      errorMessage = errorData.message;
    } catch {
      errorMessage = await response.text();
    }
    throw new Error(errorMessage || `HTTP error! status: ${response.status}`);
  }

  // More lenient content-type check
  if (contentType && !contentType.includes("json")) {
    throw new Error("Invalid response format: expected JSON");
  }

  return response.json();
};
I recommend starting with the first solution as it's the most forgiving while still maintaining proper error handling. This will help handle cases where:

The content-type header is missing
The content-type header is incorrect but the response is valid JSON
The response is malformed

Also, make sure your API endpoints are properly configured to return JSON responses with the correct content-type header.