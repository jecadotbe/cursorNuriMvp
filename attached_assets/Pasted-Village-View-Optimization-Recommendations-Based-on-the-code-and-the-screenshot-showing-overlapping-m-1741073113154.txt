Village View Optimization Recommendations
Based on the code and the screenshot showing overlapping members, here are my recommended optimizations:
1. Implement an Automatic Distribution Algorithm
javascriptCopyconst distributeMembers = () => {
  // Group members by circle
  const membersByCircle = {};
  members.forEach(member => {
    if (!membersByCircle[member.circle]) membersByCircle[member.circle] = [];
    membersByCircle[member.circle].push(member);
  });

  // Evenly distribute members in each circle
  Object.entries(membersByCircle).forEach(([circle, circleMembers]) => {
    const count = circleMembers.length;
    if (count > 0) {
      const angleStep = (2 * Math.PI) / count;
      circleMembers.forEach((member, index) => {
        // Calculate evenly spaced position
        const newAngle = index * angleStep;
        updateMember({
          ...member,
          positionAngle: newAngle.toString()
        });
      });
    }
  });
};
2. Add Collision Detection and Resolution
javascriptCopyconst MIN_ANGLE_SEPARATION = 0.2; // Minimum angle separation in radians

const resolveCollisions = () => {
  // Group members by circle and check for overlaps
  const membersByCircle = {};
  members.forEach(member => {
    if (!membersByCircle[member.circle]) membersByCircle[member.circle] = [];
    membersByCircle[member.circle].push({
      ...member,
      angle: parseFloat(member.positionAngle?.toString() || '0')
    });
  });

  // Adjust positions to prevent collisions
  Object.values(membersByCircle).forEach(circleMembers => {
    // Sort by angle and adjust positions if members are too close
    // Implementation details here...
  });
};
3. Smart Placement for New Members
javascriptCopyconst findOptimalPosition = (circle) => {
  const circleMembers = members.filter(m => m.circle === circle);
  
  if (circleMembers.length === 0) return 0; // First member at 0 radians
  
  // Find largest gap between existing members
  // Return the middle of that gap as the optimal position
};

// Use in handleSubmit:
if (!memberToEdit) {
  const angle = findOptimalPosition(newMember.circle);
  newMember.positionAngle = angle.toString();
}
4. Add a "Reorganize" Button to Control Bar
jsxCopy<Button 
  onClick={() => {
    distributeMembers();
    toast({
      title: "Village Reorganized",
      description: "Members have been evenly distributed"
    });
  }}
  className="w-10 h-10 flex items-center justify-center bg-white rounded-lg shadow"
>
  <Layout className="w-5 h-5 text-gray-700" />
</Button>
5. Improve Member Selection and Visibility
jsxCopy// Add visual cues for overlapping members
const MemberContent = ({ member, ...props }) => (
  <div
    className={`member-pill group flex items-center ${
      isOverlapping(member) ? "z-30 ring-2 ring-offset-1 ring-primary" : ""
    }`}
    // Existing code...
  >
    {/* Existing content */}
  </div>
);
6. Implement Member Search
jsxCopy// Add a search input at the top
<div className="fixed top-16 left-1/2 transform -translate-x-1/2 z-20 w-3/4 max-w-md">
  <Input
    value={searchQuery}
    onChange={(e) => setSearchQuery(e.target.value)}
    placeholder="Search village members..."
    className="w-full px-4 py-2 rounded-full shadow"
  />
  {searchQuery && (
    <div className="mt-2 bg-white rounded-lg shadow border max-h-64 overflow-y-auto">
      {/* Search results */}
    </div>
  )}
</div>
7. Performance Optimization
javascriptCopy// Only render members that are in viewport
const visibleMembers = members.filter(member => {
  const pos = getMemberPosition(member);
  return isInViewport(pos.x, pos.y, scale, position);
});

// Use React.memo to prevent unnecessary re-renders
const MemoizedMemberContent = React.memo(MemberContent);
8. Improve Touch and Click Handling
The current tap/click handling has overlapping event handlers that might interfere with each other. Simplify and improve this logic to make member selection more reliable, especially on mobile devices.
9. Adding Tooltips for Overlapped Members
When multiple members overlap, add a visual indicator that shows how many members are in that area with a tooltip listing them.
These optimizations would significantly improve the village view experience by preventing overlaps and making the interface more responsive and user-friendly.
Would you like me to elaborate on any specific optimization?