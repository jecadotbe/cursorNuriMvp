4. Memory Operations
Mem0 provides a simple and customizable interface for performing CRUD operations on memory.

​
4.1 Create Memories
​
Long-term memory for a user
These memory instances persist across multiple sessions. Ideal for maintaining memory over long time spans.


Python

JavaScript

cURL

Output (v1.0)

Output (v1.1)

const messages = [
    {"role": "user", "content": "Hi, I'm Alex. I'm a vegetarian and I'm allergic to nuts."},
    {"role": "assistant", "content": "Hello Alex! I've noted that you're a vegetarian and have a nut allergy. I'll keep this in mind for any food-related recommendations or discussions."}
];
client.add(messages, { user_id: "alex", output_format: "v1.1", metadata: { food: "vegan" } })
    .then(response => console.log(response))
    .catch(error => console.error(error));
The add method offers support for two output formats: v1.0 (default) and v1.1. To enable the latest format, which provides enhanced detail for each memory operation, set the output_format parameter to v1.1. Note that v1.0 will be deprecated in version 0.1.30.
Messages passed along with user_id, run_id, or app_id are stored as user memories, while messages from the assistant are excluded from memory. To store messages for the assistant, use agent_id exclusively and avoid including other IDs, such as user_id, alongside it. This ensures the memory is properly attributed to the assistant.

​
Short-term memory for a user session
These memory instances persist only for the duration of a user session. Ideal for non-repetitive interactions and managing context windows efficiently.


Python

JavaScript

cURL

Output (v1.0)

Output (v1.1)

const messages = [
    {"role": "user", "content": "I'm planning a trip to Japan next month."},
    {"role": "assistant", "content": "That's exciting, Alex! A trip to Japan next month sounds wonderful. Would you like some recommendations for vegetarian-friendly restaurants in Japan?"},
    {"role": "user", "content": "Yes, please! Especially in Tokyo."},
    {"role": "assistant", "content": "Great! I'll remember that you're interested in vegetarian restaurants in Tokyo for your upcoming trip. I'll prepare a list for you in our next interaction."}
];
client.add(messages, { user_id: "alex123", run_id: "trip-planning-2024", output_format: "v1.1" })
    .then(response => console.log(response))
    .catch(error => console.error(error));
​
Long-term memory for agents
Add a memory layer for the assistants and agents so that their responses remain consistent across sessions.


Python

JavaScript

cURL

Output (v1.0)

Output (v1.1)

const messages = [
    {"role": "system", "content": "You are an AI tutor with a personality. Give yourself a name for the user."},
    {"role": "assistant", "content": "Understood. I'm an AI tutor with a personality. My name is Alice."}
];
client.add(messages, { agent_id: "ai-tutor", output_format: "v1.1" })
    .then(response => console.log(response))
    .catch(error => console.error(error));
The agent_id retains memories exclusively based on messages generated by the assistant or those explicitly provided as input to the assistant. Messages outside these criteria are not stored as memory.

​
Monitor Memories
You can monitor memory operations on the platform dashboard:

Mem0 Platform Activity

​
4.2 Search Memories
​
General Memory Search
Pass user messages, interactions, and queries into our search method to retrieve relevant memories.

The search method supports two output formats: v1.0 (default) and v1.1. To use the latest format, which provides more detailed information about each memory operation, set the output_format parameter to v1.1:

Python

JavaScript

cURL

Output (v1.0)

Output (v1.1)

const query = "What should I cook for dinner today?";
client.search(query, { user_id: "alex", output_format: "v1.1" })
    .then(results => console.log(results))
    .catch(error => console.error(error));
Use category and metadata filters:


Python

JavaScript

cURL

Output

const query = "What do you know about me?";
client.search(query, categories=["food_preferences"], metadata={"food": "vegan"})
    .then(results => console.log(results))
    .catch(error => console.error(error));
​
Search using custom filters
Our advanced search allows you to set custom search filters. You can filter by user_id, agent_id, app_id, date, and more.

Here you need to define version as v2 in the search method.

Example 1: Search using user_id and agent_id filters


Python

JavaScript

cURL

Output

const query = "What do you know about me?";
const filters = {
   "AND":[
      {
         "user_id":"alex"
      },
      {
         "agent_id":{
            "in":[
               "travel-assistant",
               "customer-support"
            ]
         }
      }
   ]
};
client.search(query, { version: "v2", filters })
    .then(results => console.log(results))
    .catch(error => console.error(error));
Example 2: Search using date filters


Python

JavaScript

cURL

Output

const query = "What do you know about me?";
const filters = {
  "AND": [
    {"created_at": {"gte": "2024-07-20", "lte": "2024-07-10"}},
    {"user_id": "alex"}
  ]
};

client.search(query, { version: "v2", filters })
  .then(results => console.log(results))
  .catch(error => console.error(error));
​
4.3 Get All Users
Get all users, agents, and runs which have memories associated with them.


Python

JavaScript

cURL

Output

client.users()
    .then(users => console.log(users))
    .catch(error => console.error(error));
​
4.4 Get All Memories
Fetch all memories for a user, agent, or run using the getAll() method.

The get_all method supports two output formats: v1.0 (default) and v1.1. To use the latest format, which provides more detailed information about each memory operation, set the output_format parameter to v1.1:
We’re soon deprecating the default output format for get_all() method, which returned a list. Once the changes are live, paginated response will be the only supported format, with 100 memories per page by default. You can customize this using the page and page_size parameters.
The following examples showcase the paginated output format.

​
Get all memories of a user

Python

JavaScript

cURL

Output (v1.0)

Output (v1.1)

client.getAll({ user_id: "alex", page: 1, page_size: 50 })
    .then(memories => console.log(memories))
    .catch(error => console.error(error));
​
Get all memories of an AI Agent

Python

JavaScript

cURL

Output (v1.0)

Output (v1.1)

client.getAll({ agent_id: "ai-tutor", page: 1, page_size: 50 })
    .then(memories => console.log(memories))
    .catch(error => console.error(error));
​
Get the short-term memories for a session

Python

JavaScript

cURL

Output (v1.0)

Output (v1.1)

client.getAll({ user_id: "alex123", run_id: "trip-planning-2024", page: 1, page_size: 50 })
    .then(memories => console.log(memories))
    .catch(error => console.error(error));
​
Get specific memory

Python

JavaScript

cURL

Output

client.get("582bbe6d-506b-48c6-a4c6-5df3b1e63428")
    .then(memory => console.log(memory))
    .catch(error => console.error(error));
​
Get all memories by categories
You can filter memories by their categories when using get_all:


Python

JavaScript

cURL

Output(Paginated)

// Get memories with specific categories
client.getAll({ user_id: "alex123", categories: ["likes"] })
    .then(memories => console.log(memories))
    .catch(error => console.error(error));

// Get memories with multiple categories
client.getAll({ user_id: "alex123", categories: ["likes", "food_preferences"] })
    .then(memories => console.log(memories))
    .catch(error => console.error(error));

// Custom pagination with categories
client.getAll({ user_id: "alex123", categories: ["likes"], page: 1, page_size: 50 })
    .then(memories => console.log(memories))
    .catch(error => console.error(error));

// Get memories with specific keywords
client.getAll({ user_id: "alex123", keywords: "to play", page: 1, page_size: 50 })
    .then(memories => console.log(memories))
    .catch(error => console.error(error));
​
Get all memories using custom filters
Our advanced retrieval allows you to set custom filters when fetching memories. You can filter by user_id, agent_id, app_id, date, and more.

Here you need to define version as v2 in the get_all method.

Example: Get all memories using user_id and date filters


Python

JavaScript

cURL

Output (Default)

Output (Paginated)

const filters = {
   "AND":[
      {
         "user_id":"alex"
      },
      {
         "created_at":{
            "gte":"2024-07-01",
            "lte":"2024-07-31"
         }
      },
      {
         "categories":{
            "contains": "food_preferences"
         }
      },
      {
         "keywords":{
            "contains": "to play"
         }
      }
   ]
};

// Default (No Pagination)
client.getAll({ version: "v2", filters })
    .then(memories => console.log(memories))
    .catch(error => console.error(error));

// Pagination (You can also use the page and page_size parameters)
client.getAll({ version: "v2", filters, page: 1, page_size: 50 })
    .then(memories => console.log(memories))
    .catch(error => console.error(error));
​
4.5 Memory History
Get history of how a memory has changed over time.


Python

JavaScript

cURL

Output

// Add some message to create history
let messages = [{ role: "user", content: "I recently tried chicken and I loved it. I'm thinking of trying more non-vegetarian dishes.." }];
client.add(messages, { user_id: "alex" })
    .then(result => {
        // Add second message to update history
        messages.push({ role: 'user', content: 'I turned vegetarian now.' });
        return client.add(messages, { user_id: "alex" });
    })
    .then(result => {
        // Get history of how memory changed over time
        const memoryId = result.id; // Assuming the API returns the memory ID
        return client.history(memoryId);
    })
    .then(history => console.log(history))
    .catch(error => console.error(error));
​
4.6 Update Memory
Update a memory with new data.


Python

JavaScript

cURL

Output

const message = "I recently tried chicken and I loved it. I'm thinking of trying more non-vegetarian dishes..";
client.update("memory-id-here", message)
    .then(result => console.log(result))
    .catch(error => console.error(error));
​
4.7 Delete Memory
Delete specific memory.


Python

JavaScript

cURL

Output

client.delete("memory-id-here")
    .then(result => console.log(result))
    .catch(error => console.error(error));
Delete all memories of a user.


Python

JavaScript

cURL

Output

client.deleteAll({ user_id: "alex" })
    .then(result => console.log(result))
    .catch(error => console.error(error));
Delete all users.


Python

JavaScript

Output

client.delete_users()
    .then(users => console.log(users))
    .catch(error => console.error(error));
​
4.8 Reset Client

Python

JavaScript

Output

client.reset()
    .then(result => console.log(result))
    .catch(error => console.error(error));
Fun fact: You can also delete the memory using the add() method by passing a natural language command:


Python

JavaScript

cURL

Output

client.add("Delete all of my food preferences", { user_id: "alex" })
    .then(result => console.log(result))
    .catch(error => console.error(error));
​
4.9 Batch Update Memories
Update multiple memories in a single API call. You can update up to 1000 memories at once.


Python

JavaScript

cURL

Output

const updateMemories = [
    {
        memoryId: "285ed74b-6e05-4043-b16b-3abd5b533496",
        text: "Watches football"
    },
    {
        memoryId: "2c9bd859-d1b7-4d33-a6b8-94e0147c4f07",
        text: "Loves to travel"
    }
];

client.batchUpdate(updateMemories)
    .then(response => console.log('Batch update response:', response))
    .catch(error => console.error(error));
​
4.10 Batch Delete Memories
Delete multiple memories in a single API call. You can delete up to 1000 memories at once.


Python

JavaScript

cURL

Output

const deleteMemories = [
    {"memory_id": "285ed74b-6e05-4043-b16b-3abd5b533496"},
    {"memory_id": "2c9bd859-d1b7-4d33-a6b8-94e0147c4f07"}
];

client.batchDelete(deleteMemories)
    .then(response => console.log('Batch delete response:', response))
    .catch(error => console.error(error));