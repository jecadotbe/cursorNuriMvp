Looking at the code provided, I notice the error is likely caused by how the server is responding to the request. Let me explain what's happening and what we should check.
The error message "Unexpected token '<', '<!DOCTYPE'..." suggests that instead of receiving JSON, the client is getting an HTML page. This typically happens in one of several scenarios:
First, let's validate the request being made. The code shows a well-structured fetch call with proper headers and credentials. The key components are:

Content-Type and Accept headers are correctly set for JSON
Credentials are included for authentication
The request body is properly structured with all necessary member data

However, there are a few potential issues we should investigate:

Server Route Configuration
The code is making a request to '/api/village', but we need to ensure this endpoint exists and is properly configured. Check if you have a corresponding API route handler that:

typescriptCopy// pages/api/village/route.ts or similar
export async function POST(req: Request) {
  // Should return proper JSON responses
  return Response.json({ ... })
}

Error Handling Middleware
Your server might have middleware that's catching an error and returning an HTML error page instead of JSON. This commonly happens with:


Authentication middleware redirecting to a login page
General error handling middleware returning HTML error templates


API Response Format
We should verify the server endpoint is properly formatting its responses. Here's what it should look like:

typescriptCopy// Proper JSON response
return Response.json({
  id: newMember.id,
  name: newMember.name,
  type: newMember.type,
  circle: newMember.circle,
  // ... other fields
});
To debug this:

Open your browser's Developer Tools (F12)
Go to the Network tab
Try to add a village member
Look for the failed request to '/api/village'
Check both the Request and Response tabs

The Response tab will show exactly what the server is returning, which will help identify where the HTML is coming from.
Would you be able to check your server-side code and the network response to confirm which of these potential issues might be causing the problem? This would help us pinpoint the exact solution needed.