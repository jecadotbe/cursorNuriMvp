import React, { useState } from 'react';
import { ChevronLeft, Plus, Minus, ZoomIn, ZoomOut } from 'lucide-react';
import Draggable from 'react-draggable';

interface ChipData {
  id: number;
  label: string;
  circleIndex: number; // which circle it belongs to
  x: number; // offset from the center in px
  y: number; // offset from the center in px
}

/**
 * Example array of circles. Could just be indexes [1..5]
 * or an array that explicitly gives radius in px.
 */
const circles = [
  { id: 1, radius: 100 },
  { id: 2, radius: 200 },
  { id: 3, radius: 300 },
  { id: 4, radius: 400 },
  { id: 5, radius: 500 },
];

/**
 * Example “chips” data. Suppose we have 5 chips,
 * each assigned to some circle and a position.
 * x,y is how far from center we initially place it.
 */
const initialChips: ChipData[] = [
  { id: 1, label: 'School', circleIndex: 1, x: 100, y: 0 },
  { id: 2, label: 'Huishoudhulp', circleIndex: 2, x: 0, y: 200 },
  { id: 3, label: 'Nuri', circleIndex: 3, x: -300, y: -20 },
  { id: 4, label: 'Muziek', circleIndex: 4, x: 0, y: 400 },
  { id: 5, label: 'Therapie', circleIndex: 5, x: 500, y: 0 },
];

const VillageView: React.FC = () => {
  const [scale, setScale] = useState(1);
  const [chips, setChips] = useState<ChipData[]>(initialChips);

  const handleZoomIn = () => {
    setScale((prev) => Math.min(prev + 0.1, 3)); // max 3x zoom
  };

  const handleZoomOut = () => {
    setScale((prev) => Math.max(prev - 0.1, 0.3)); // min 0.3x zoom
  };

  // Called whenever a chip is dragged; update its x,y in state
  const handleDrag = (chipId: number, data: { x: number; y: number }) => {
    setChips((prev) =>
      prev.map((c) => {
        if (c.id === chipId) {
          return { ...c, x: data.x, y: data.y };
        }
        return c;
      })
    );
  };

  return (
    <div className="flex-1 flex flex-col bg-[#F2F0E5] relative">
      {/* Header */}
      <div
        className="relative p-4 min-h-[200px]"
        style={{
          background: `url('/images/village_circles_page.png'), linear-gradient(45deg, #C2ECD1 0%, #F8DE9F 35%)`,
          backgroundPosition: 'left',
          backgroundRepeat: 'no-repeat',
          backgroundSize: 'contain',
        }}
      >
        <div className="flex items-center space-x-4">
          <ChevronLeft className="w-6 h-6 text-gray-800" />
          <span className="text-xl text-gray-800">Mijn Village</span>
        </div>
        <h1 className="text-2xl font-medium mt-6 text-[#2F4644] max-w-[280px]">
          Een bloeiende Village als middel tegen 'Village Armoede'
        </h1>
      </div>

      {/* Zoom Controls */}
      <div className="absolute top-32 right-4 flex flex-col space-y-2 z-10">
        <button
          onClick={handleZoomIn}
          className="w-10 h-10 flex items-center justify-center bg-white rounded shadow"
        >
          <ZoomIn className="w-5 h-5 text-gray-700" />
        </button>
        <button
          onClick={handleZoomOut}
          className="w-10 h-10 flex items-center justify-center bg-white rounded shadow"
        >
          <ZoomOut className="w-5 h-5 text-gray-700" />
        </button>
      </div>

      {/* Main content (circles + chips) */}
      <div className="flex-1 relative overflow-hidden">
        <div
          className="absolute inset-0 flex items-center justify-center"
          // We'll scale *and* translate this parent container
          style={{ transform: `scale(${scale})` }}
        >
          {/* Circles */}
          <div className="relative">
            {circles.map((circle) => (
              <div
                key={circle.id}
                className="absolute border border-green-200 rounded-full"
                style={{
                  width: circle.radius * 2,
                  height: circle.radius * 2,
                  top: '50%',
                  left: '50%',
                  transform: 'translate(-50%, -50%)',
                }}
              />
            ))}

            {/* Center bubble “Kerngezin” */}
            <div
              className="absolute w-16 h-16 bg-white rounded-full flex items-center justify-center shadow-lg"
              style={{
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%)',
              }}
            >
              <span className="text-green-800 text-sm">Kerngezin</span>
            </div>

            {/* Chips */}
            {chips.map((chip) => {
              return (
                <Draggable
                  key={chip.id}
                  position={{ x: chip.x, y: chip.y }}
                  onDrag={(e, data) => handleDrag(chip.id, data)}
                >
                  <div
                    className="absolute cursor-move"
                    style={{
                      // The Draggable container takes care
                      // of x,y, so we only need to center it
                      // if we want it visually centered
                      transform: 'translate(-50%, -50%)',
                    }}
                  >
                    <div className="flex items-center space-x-2 bg-white rounded-full px-3 py-1 shadow">
                      {/* Dot */}
                      <span
                        className="w-3 h-3 block rounded-full"
                        style={{ backgroundColor: 'blue' }}
                      />
                      <span className="text-gray-800 text-sm">{chip.label}</span>
                    </div>
                  </div>
                </Draggable>
              );
            })}
          </div>
        </div>
      </div>

      {/* Village suggestions */}
      <div className="p-4 flex">
        <div className="flex items-center justify-between bg-white rounded-full px-6 py-3 shadow-md w-auto max-w-[50%]">
          <span>
            Er zijn <strong className="text-orange-500">3</strong> village
            suggesties
          </span>
          <ChevronLeft className="w-5 h-5 transform rotate-90 ml-2" />
        </div>
      </div>

      {/* Add button */}
      <button className="absolute bottom-20 right-4 w-12 h-12 bg-green-900 rounded-full flex items-center justify-center shadow-lg">
        <Plus className="w-6 h-6 text-white" />
      </button>
    </div>
  );
};

export default VillageView;
